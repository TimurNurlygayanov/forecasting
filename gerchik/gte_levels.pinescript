//@version=5
indicator("GTE Levels", overlay=true, max_bars_back=1000)

levels_color = input.color(color.black, "Levels Color")
levels_width = input.int(1, "Levels Width")
// Number of bars to consider
numBars = input.int(150, "Number of daily bars to consider to find levels")
delta_coefficient = input.float(0.03, "Delta % of daily ATR (max diff in prices)")
max_levels_count = input.int(4, "Max number of levels lower or higher the current price to display")
required_bars_count = input.int(4, "Min number of daily bars touching the level required")

dailyHigh = request.security(syminfo.tickerid, "D", high[1])
dailyLow = request.security(syminfo.tickerid, "D", low[1])
dailyATR = request.security(syminfo.tickerid, "D", ta.atr(14)[1])

//lowestLow50 = ta.lowest(low, 200)
//highestHigh50 = ta.highest(high, 200)


var float[] daily_highs = array.new_float(numBars)
var float[] daily_lows = array.new_float(numBars)
var int last_day = 0

if last_day != dayofmonth
    daily_highs.unshift(dailyHigh)
    daily_highs.pop()

    daily_lows.unshift(dailyLow)
    daily_lows.pop()

    last_day := dayofmonth

// Price delta to consider
delta = delta_coefficient * dailyATR

var int last_bar_draw = -100

if bar_index != last_bar_draw and barstate.islast
    // clear previous drawing
    while line.all.size() > 0
        line.delete(line.all.pop())


    var float[] levels = array.new_float(0)
    var float[] combinedPrices = array.new_float(0)

    combinedPrices := daily_lows.copy()
    combinedPrices := combinedPrices.concat(daily_highs.copy())
    combinedPrices.sort()

    var float previous_price = 0.0
    var int k = 0

    for i = 0 to combinedPrices.size() - 1
        if math.abs(combinedPrices.get(i) - previous_price) < delta
            k := k + 1
        else
            if k >= required_bars_count
                levels.push(previous_price)

            k := 0
            previous_price := combinedPrices.get(i)

    k := 0
    previous_price := 0
    levels.sort()

    k_index = 0
    if levels.size() > 1
        for i = 0 to levels.size() - 2
            if levels.get(i) < close and close < levels.get(i+1)
                k_index := i

    if levels.size() > 0
        for r = math.max(0, k_index-max_levels_count+1) to math.min(levels.size()-1, k_index+max_levels_count-1)
            line.new(x1=bar_index - 1500, y1=levels.get(r), x2=last_bar_index+20, y2=levels.get(r), color=levels_color, width = levels_width)

    combinedPrices.clear()
    levels.clear()

    last_bar_draw := bar_index
